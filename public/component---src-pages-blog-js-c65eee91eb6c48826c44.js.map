{"version":3,"sources":["webpack://gatsby-shopify-starter/./src/components/ProductGrid/styles.js","webpack://gatsby-shopify-starter/./src/components/ProductGrid/index.js","webpack://gatsby-shopify-starter/./src/pages/blog.js"],"names":["Grid","styled","breakpoints","Product","Title","PriceTag","checkout","useContext","StoreContext","store","allShopifyProduct","useStaticQuery","edges","map","price","node","id","handle","title","firstImage","images","firstVariant","variants","key","Link","to","localFile","fluid","childImageSharp","alt","Intl","NumberFormat","undefined","currency","currencyCode","minimumFractionDigits","style","format","parseFloat","data","allContentfulArticle","nodes","summary","maxWidth","marginBottom","keywords"],"mappings":"2OAIaA,EAAOC,QAAH,qLAKMC,QAKVC,EAAUF,QAAH,0FAMPG,EAAQH,SAAH,0FAMLI,EAAWJ,SAAH,qJCyDrB,EA5EoB,WAAO,IAEdK,GACPC,gBAAWC,KADbC,MAASH,SAEHI,GAAsBC,oBAAe,cAArCD,kBAsCR,OACE,gBAACV,EAAD,KACGU,EAAkBE,MACjBF,EAAkBE,MAAMC,KACtB,gBAXSC,EAWT,IACEC,KACEC,EAFJ,EAEIA,GACAC,EAHJ,EAGIA,OACAC,EAJJ,EAIIA,MACSC,EALb,EAKIC,OALJ,GAMeC,EANf,EAMIC,SANJ,UASE,gBAACnB,EAAD,CAASoB,IAAKP,GACZ,gBAAC,EAAAQ,KAAD,CAAMC,GAAE,YAAcR,EAAd,KACLE,GAAcA,EAAWO,WACxB,gBAAC,KAAD,CACEC,MAAOR,EAAWO,UAAUE,gBAAgBD,MAC5CE,IAAKZ,KAIX,gBAACb,EAAD,KAAQc,GACR,gBAACb,EAAD,MA9BKS,EA8BeO,EAAaP,MA7B3CgB,KAAKC,kBAAaC,EAAW,CAC3BC,SAAU3B,EAAS4B,aAAe5B,EAAS4B,aAAe,MAC1DC,sBAAuB,EACvBC,MAAO,aACNC,OAAOC,WAAWxB,GAAgB,UA8BjC,kD,kFC7BR,UA1CkB,WACd,IAAMyB,GAAO5B,oBAAe,cAW9B,OACE,gCACE,gBAAC,IAAD,CAAKO,MAAM,SACX,uCAECqB,EAAKC,qBAAqBC,MAAM5B,KAAI,gBAAGG,EAAH,EAAGA,GAAIE,EAAP,EAAOA,MAAOwB,EAAd,EAAcA,QAAd,OACnC,uBAAKnB,IAAKP,GACN,0BAAKE,GACL,0BAAKwB,OAGX,6DACA,0DACA,uBAAKN,MAAO,CAAEO,SAAS,QAAUC,aAAa,aAG9C,gBAAC,IAAD,CAAK1B,MAAM,OAAO2B,SAAU,CAAC,SAAD,yBAE5B,gBAAC,EAAArB,KAAD,CAAMC,GAAG,YAAT","file":"component---src-pages-blog-js-c65eee91eb6c48826c44.js","sourcesContent":["import styled from '@emotion/styled'\n\nimport { breakpoints } from '../../utils/styles'\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2.5rem;\n\n  @media (max-width: ${breakpoints.s}px) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n`\n\nexport const Product = styled.div`\n  display: flex;\n  min-height: 100%;\n  flex-direction: column;\n`\n\nexport const Title = styled.span`\n  font-weight: 300;\n  font-size: 1.2rem;\n  text-align: center;\n`\n\nexport const PriceTag = styled.span`\n  font-weight: 300;\n  font-size: 1rem;\n  text-align: center;\n  margin-top: 15px;\n\n  :before {\n    content: '- ';\n  }\n`\n","import React, { useContext } from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\n\nimport StoreContext from '~/context/StoreContext'\nimport { Grid, Product, Title, PriceTag } from './styles'\nimport { Img } from '~/utils/styles'\n\nconst ProductGrid = () => {\n  const {\n    store: { checkout },\n  } = useContext(StoreContext)\n  const { allShopifyProduct } = useStaticQuery(\n    graphql`\n      query {\n        allShopifyProduct(sort: { fields: [createdAt], order: DESC }) {\n          edges {\n            node {\n              id\n              title\n              handle\n              createdAt\n              images {\n                id\n                originalSrc\n                localFile {\n                  childImageSharp {\n                    fluid(maxWidth: 910) {\n                      ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                    }\n                  }\n                }\n              }\n              variants {\n                price\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const getPrice = price =>\n    Intl.NumberFormat(undefined, {\n      currency: checkout.currencyCode ? checkout.currencyCode : 'EUR',\n      minimumFractionDigits: 2,\n      style: 'currency',\n    }).format(parseFloat(price ? price : 0))\n\n  return (\n    <Grid>\n      {allShopifyProduct.edges ? (\n        allShopifyProduct.edges.map(\n          ({\n            node: {\n              id,\n              handle,\n              title,\n              images: [firstImage],\n              variants: [firstVariant],\n            },\n          }) => (\n            <Product key={id}>\n              <Link to={`/product/${handle}/`}>\n                {firstImage && firstImage.localFile && (\n                  <Img\n                    fluid={firstImage.localFile.childImageSharp.fluid}\n                    alt={handle}\n                  />\n                )}\n              </Link>\n              <Title>{title}</Title>\n              <PriceTag>{getPrice(firstVariant.price)}</PriceTag>\n            </Product>\n          )\n        )\n      ) : (\n        <p>No Products found!</p>\n      )}\n    </Grid>\n  )\n}\n\nexport default ProductGrid\n","import React from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\n\nimport SEO from '~/components/seo'\nimport ProductGrid from '~/components/ProductGrid'\n\nconst IndexPage = () => {\n    const data = useStaticQuery(graphql`\n    query allContentfulArticle {\n      allContentfulArticle {\n        nodes {\n          id\n          title\n          summary\n        }\n      }\n    }\n  `)\n  return (\n    <>\n      <SEO title=\"Home\" />\n      <h1>Hi people</h1>\n      {/* 取得したデータを表示する処理を追加 */}\n      {data.allContentfulArticle.nodes.map(({ id, title, summary }) => (\n        <div key={id}>\n            <h3>{title}</h3>\n            <h3>{summary}</h3>\n        </div>\n      ))}\n      <p>Welcome to your new Gatsby site.</p>\n      <p>Now go build something great.</p>\n      <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n      </div>\n\n      <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n\n      <Link to=\"/page-2/\">Go to page 2</Link>\n    </>\n  )\n//  <>\n//    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n//    <h1>Hi people</h1>\n//    <p>Welcome to your new Shop powered by Gatsby and Shopify.</p>\n//    <ProductGrid />\n//    <Link to=\"/page-2/\">Go to page 2</Link>\n//  </>\n}\n\nexport default IndexPage\n"],"sourceRoot":""}